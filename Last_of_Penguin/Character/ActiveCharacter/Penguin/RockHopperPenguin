using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RockHopperPenguin : ActiveSkillCharacter
{
    [Header("Skill")]
    [SerializeField] private float jumpPower;
    [SerializeField] private float forwardPower; // 앞으로 나아가는 힘
    [SerializeField] private float rayDistance = 1f; // Raycast 거리 설정
    [SerializeField] private float forwardDuration = 0.5f; // 앞으로 나아가는 지속 시간
    [SerializeField] private float forwardDelay = 0.5f; // 앞으로 이동 시작 전에 지연 시간
    [SerializeField] private float rayHeightOffset = 0.5f; // 레이를 쏘는 위치의 높이 오프셋

    [SerializeField] private GameObject notAvailableImage;

    [SerializeField] private LayerMask wallLayer; // wall 레이어 변수

    protected override void Update()
    {
        base.Update();

        // 레이의 시작 위치를 캐릭터의 위치보다 약간 위로 설정
        Vector3 rayOrigin = transform.position + Vector3.up * rayHeightOffset;

        RaycastHit[] hits = Physics.RaycastAll(rayOrigin, transform.forward, rayDistance, facilityLayer);
        RaycastHit[] wallHits = Physics.RaycastAll(rayOrigin, transform.forward, rayDistance, wallLayer);

        // 감지된 콜라이더가 facilityLayer에서 1개일 때만, wallLayer가 감지되지 않을 때 동작
        if (hits.Length == 1 && hits[0].collider != null && wallHits.Length == 0)
        {
            notAvailableImage.SetActive(false);
        }
        else
        {
            if (currentSkillCoolTime <= 0)
            {
                notAvailableImage.SetActive(true);
            }
        }
    }

    protected override void PerformSkill()
    {
        // 레이의 시작 위치를 캐릭터의 위치보다 약간 위로 설정
        Vector3 rayOrigin = transform.position + Vector3.up * rayHeightOffset;

        RaycastHit[] hits = Physics.RaycastAll(rayOrigin, transform.forward, rayDistance, facilityLayer);
        RaycastHit[] wallHits = Physics.RaycastAll(rayOrigin, transform.forward, rayDistance, wallLayer);

        // 감지된 콜라이더가 facilityLayer에서 1개일 때만, wallLayer가 감지되지 않을 때 동작
        if (hits.Length == 1 && hits[0].collider != null && wallHits.Length == 0)
        {
            notAvailableImage.SetActive(false);

            base.PerformSkill();

            animator.SetTrigger("isJump");

            Debug.Log("감지된 레이어: " + LayerMask.LayerToName(hits[0].collider.gameObject.layer)); // 감지된 레이어 이름 출력
            rb.AddForce(Vector3.up * jumpPower, ForceMode.Impulse);

            StartCoroutine(ForwardWithDelay());
            StartCoroutine(StopMoveCor());
        }
    }

    protected override void FinishSkill()
    {
    }

    IEnumerator ForwardWithDelay()
    {
        yield return new WaitForSeconds(forwardDelay);

        float elapsedTime = 0f;

        while (elapsedTime < forwardDuration)
        {
            rb.AddForce(transform.forward * forwardPower * Time.deltaTime, ForceMode.VelocityChange); // 지속적으로 앞으로 힘 추가
            elapsedTime += Time.deltaTime; // 경과 시간 업데이트
            yield return null; // 다음 프레임까지 대기
        }
    }

    private void OnDrawGizmos()
    {
        Vector3 rayOrigin = transform.position + Vector3.up * rayHeightOffset;

        Gizmos.color = Color.red; // Gizmos 색상 설정
        Gizmos.DrawRay(rayOrigin, transform.forward * rayDistance); // Ray 그리기
    }

    IEnumerator StopMoveCor()
    {
        Collider collider = GetComponent<Collider>();
        isMove = false;
        collider.isTrigger = true;
        yield return new WaitForSeconds(0.6f);
        collider.isTrigger = false;
        isMove = true;
    }
}
